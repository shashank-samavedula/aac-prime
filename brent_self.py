import random
import math
import time


# function for primality testing
def rabin_miller(p):

    if p < 2:
        return False

    if p != 2 and p % 2 == 0:
        return False

    if p == 2:
        return True

    s = p-1

    while s % 2 == 0:
        s >>= 1

    for i in range(10):
        a = random.randrange(p-1) + 1
        temp = s
        mod = pow(a, temp, p)

        while temp != p-1 and mod != 1 and mod != p-1:
            mod = (mod * mod) % p
            temp = temp * 2

        if mod != p-1 and temp % 2 == 0:
            return False

    return True


def brent(n):
    # factor generated by brent may or may not be prime
    # if n is prime returns n
    # no prime divisor for 1

    # list to store result
    result = []

    if n == 2:
        return [n]

    while n % 2 == 0:
        n = math.floor(n / 2)
        result += [2]

    if n == 1:
        return result

	if rabin_miller(n):
        result += [n]
        return result
	
    y, c, m = random.randint(1, n - 1), random.randint(1, n - 1), 128
    g, r, q = 1, 1, 1

    ys = y
    x = y

    while g == 1:
        x = y
        for i in range(r):
            y = ((y * y) % n + c) % n
        k = 0
        while k < r and g == 1:
            ys = y
            for i in range(min(m, r - k)):
                y = ((y * y) % n + c) % n
                q = q * (abs(x - y)) % n
            g = math.gcd(q, n)
            k = k + m
        r = r * 2

    if g == n:
        while True:
            ys = ((ys * ys) % n + c) % n
            g = math.gcd(abs(x - ys), n)
            if g > 1:
                break

    if g == n:
        return [n]

    result += brent(g)
    n = n//g
    result += brent(n)

    return result


# To test whether algorithm produced correct results
def test_algorithm(actual, expected):
    actual.sort()
    expected.sort()
    if actual == expected:
        return True
    return False


# Driver function
if __name__ == "__main__":

    f = open("test_case_partial.txt", 'r')

    while True:
        # read testcase from file
        line_n_input = f.readline()
        line_result_expected = f.readline()

        if line_n_input and line_result_expected:
            n_input = int(line_n_input)
            result_expected = [int(i) for i in line_result_expected.split()]

            # call algorithm method to obtain actual results
            # also calculate time required (elapsed time) for complete calculation
            t_start = time.time()
            result_actual = brent(n_input)
            t_end = time.time()
            elapsed_time = t_end - t_start

            if test_algorithm(result_actual, result_expected):
                print("\nBrent algorithm produced correct results.")
                print("Time taken is {} ms".format(elapsed_time * 1000))
                print("The prime factors of {} are {}".format(n_input, result_actual))
            else:
                print("\nBrent algorithm produced incorrect results.")
                print("\nActual prime factors of {} generated running algorithm are {}".format(n_input, result_actual))
                print("\nExpected prime factors of {} are {}".format(n_input, result_expected))
        else:
            break
